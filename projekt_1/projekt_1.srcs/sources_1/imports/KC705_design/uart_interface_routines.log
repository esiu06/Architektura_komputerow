KCPSM6 Assembler log file for program 'G:\Architektora_Kom\projekt_1\projekt_1.srcs\sources_1\imports\KC705_design\uart_interface_routines.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 15 Mar 2020
Assembly timestamp: 14:48:24

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 010 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 17
Memory locations available: 4079


Assembly listing

 Addr Code                      Instruction

 000                            ;
 000                            ;------------------------------------------------------------------------------------------
 000                            ; Copyright © 2011-2012, Xilinx, Inc.
 000                            ; This file contains confidential and proprietary information of Xilinx, Inc. and is
 000                            ; protected under U.S. and international copyright and other intellectual property laws.
 000                            ;------------------------------------------------------------------------------------------
 000                            ;
 000                            ; Disclaimer:
 000                            ; This disclaimer is not a license and does not grant any rights to the materials
 000                            ; distributed herewith. Except as otherwise provided in a valid license issued to
 000                            ; you by Xilinx, and to the maximum extent permitted by applicable law: (1) THESE
 000                            ; MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY
 000                            ; DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
 000                            ; INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT,
 000                            ; OR FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable
 000                            ; (whether in contract or tort, including negligence, or under any other theory
 000                            ; of liability) for any loss or damage of any kind or nature related to, arising
 000                            ; under or in connection with these materials, including for any direct, or any
 000                            ; indirect, special, incidental, or consequential loss or damage (including loss
 000                            ; of data, profits, goodwill, or any type of loss or damage suffered as a result
 000                            ; of any action brought by a third party) even if such damage or loss was
 000                            ; reasonably foreseeable or Xilinx had been advised of the possibility of the same.
 000                            ;
 000                            ; CRITICAL APPLICATIONS
 000                            ; Xilinx products are not designed or intended to be fail-safe, or for use in any
 000                            ; application requiring fail-safe performance, such as life-support or safety
 000                            ; devices or systems, Class III medical devices, nuclear facilities, applications
 000                            ; related to the deployment of airbags, or any other applications that could lead
 000                            ; to death, personal injury, or severe property or environmental damage
 000                            ; (individually and collectively, "Critical Applications"). Customer assumes the
 000                            ; sole risk and liability of any use of Xilinx products in Critical Applications,
 000                            ; subject only to applicable laws and regulations governing limitations on product
 000                            ; liability.
 000                            ;
 000                            ; THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.
 000                            ;
 000                            ;------------------------------------------------------------------------------------------
 000                            ;
 000                            ;             _  ______ ____  ____  __  __  __
 000                            ;            | |/ / ___|  _ \/ ___||  \/  |/ /_
 000                            ;            | ' / |   | |_) \___ \| |\/| | '_ \
 000                            ;            | . \ |___|  __/ ___) | |  | | (_) )
 000                            ;            |_|\_\____|_|   |____/|_|  |_|\___/
 000                            ;
 000                            ;
 000                            ;                PicoBlaze Reference Design.
 000                            ;
 000                            ;
 000                            ; Ken Chapman - Xilinx Ltd
 000                            ;
 000                            ; 23rd April 2012 - Initial Release
 000                            ; 24th July 2012 - Corrections to comments only
 000                            ;
 000                            ; This file contains routines used to interface with the UART6 macros provided with KCPSM6
 000                            ; and was first supplied with a reference design called 'uart6_605' included in the
 000                            ; PicoBlaze package. The routines enable characters to be transmitted to and received
 000                            ; from the UART macros as well as perform a reset of the FIFO the buffers.
 000                            ;
 000                            ;     NOTE - This is not a standalone PSM file. The 'uart_control.psm' file supplied with
 000                            ;            the reference design stated above includes this file and calls the routines
 000                            ;            contained in this file.
 000                            ;
 000                            ;                INCLUDE "uart_interface_routines.psm"
 000                            ;
 000                            ;     Hint - The INCLUDE directive was introduced in KCPSM6 Assembler v2.00.
 000                            ;
 000                            ;
 000                            ; Whilst the reference design stated above was presented for the UART macros connected to
 000                            ; the USB/UART interface on the Xilinx ML605 Evaluation Kit this file can be ported to
 000                            ; any design for any board simply by setting the appropriate values in the CONSTANT
 000                            ; directives described below.
 000                            ;
 000                            ;
 000                            ;------------------------------------------------------------------------------------------
 000                            ; Hardware Constants
 000                            ;------------------------------------------------------------------------------------------
 000                            ;
 000                            ; The CONSTANT directives below define the input and output ports assigned to the UART
 000                            ; macros that implement a 115,200 baud rate communication with the USB/UART on the board.
 000                            ; Additional constants identify the allocation of signals to bits within a port.
 000                            ;
 000                            ;
 000                            ;
 000                            ; UART Status
 000                            ; -----------
 000                            ;
 000                            CONSTANT UART_status_port, 00                ; Read status
 000                            CONSTANT UART_Tx_data_present, 00000001'b    ; Tx   data_present - bit0
 000                            CONSTANT UART_Tx_half_full, 00000010'b       ;         half_full - bit1
 000                            CONSTANT UART_Tx_full, 00000100'b            ;              full - bit2
 000                            CONSTANT UART_Rx_data_present, 00001000'b    ; Rx   data_present - bit3
 000                            CONSTANT UART_Rx_half_full, 00010000'b       ;         half_full - bit4
 000                            CONSTANT UART_Rx_full, 00100000'b            ;              full - bit5
 000                            ;
 000                            ; Write data to UART_TX6
 000                            ; ----------------------
 000                            ;
 000                            CONSTANT UART_TX6_output_port, 01
 000                            ;
 000                            ; Read data from UART_RX6
 000                            ; -----------------------
 000                            ;
 000                            CONSTANT UART_RX6_input_port, 01
 000                            ;
 000                            ; Reset UART buffers (Constant Optimised Port)
 000                            ; --------------------------------------------
 000                            ;
 000                            CONSTANT reset_UART_port, 01
 000                            CONSTANT UART_tx_reset, 00000001'b           ; uart_tx6 reset - bit0
 000                            CONSTANT UART_rx_reset, 00000010'b           ; uart_rx6 reset - bit1
 000                            CONSTANT UART_reset, 00000011'b              ; reset Tx and Rx
 000                            CONSTANT UART_operate, 00000000'b            ; Tx and Rx free to operate
 000                            ;
 000                            ;
 000                            ;--------------------------------------------------------------------------------------
 000                            ; Routine to reset UART Buffers inside 'uart_tx6' and 'uart_rx6'
 000                            ;--------------------------------------------------------------------------------------
 000                            ;
 000                            ; This routine will generate and apply an active High reset pulse to  the FIFO
 000                            ; buffers in both the transmitter and receiver macros.
 000                            ;
 000                            ; Note that the reset signals have been assigned to a constant optimised output port
 000                            ; so the 'OUTPUTK' instructions are used and no registers contents are affected.
 000                            ;
 000                            ;
 000  2B031  reset_UART_macros: OUTPUTK 03[UART_reset], 1[reset_UART_port]
 001  2B001                     OUTPUTK 00[UART_operate], 1[reset_UART_port]
 002  25000                     RETURN 
 003                            ;
 003                            ;
 003                            ;--------------------------------------------------------------------------------------
 003                            ; Routine to send one character to the UART Transmitter 'uart_tx6'
 003                            ;--------------------------------------------------------------------------------------
 003                            ;
 003                            ; This routine will transmit the character provided in register 's5'.
 003                            ;
 003                            ; Before the character is output to the 'UART_TX6' macro the status of the FIFO buffer
 003                            ; is checked to see if there is space. If the buffer is full then this routine will
 003                            ; wait for space to become available (e.g. the time required for a previous character
 003                            ; to be transmitted by the UART).
 003                            ;
 003                            ; Registers used s0 and s5 for the data (which is preserved)
 003                            ;
 003  09000            UART_TX: INPUT s0, 00[UART_status_port]               ;Check if buffer is full
 004  0D004                     TEST s0, 04[UART_Tx_full]
 005  36003                     JUMP NZ, 003[UART_TX]                        ;wait if full
 006  2D501                     OUTPUT s5, 01[UART_TX6_output_port]
 007  25000                     RETURN 
 008                            ;
 008                            ;
 008                            ;--------------------------------------------------------------------------------------
 008                            ; Routine to attempt to receive one character from the UART Receiver 'uart_rx6'
 008                            ;--------------------------------------------------------------------------------------
 008                            ;
 008                            ; This routine will attempt to receive one character from the 'UART_RX6' macro, and if
 008                            ; successful, will return that character in register 's5' and the Zero flag will be
 008                            ; reset (Z=0).
 008                            ;
 008                            ; If there are no characters available to be read from the FIFO buffer within the
 008                            ; 'UART_RX6' macro then this routine will timeout after ~2,000 clock cycles (which is
 008                            ; 40us at 50MHz) with the Zero flag set (Z=1). This timeout scheme ensures that KCPSM6
 008                            ; cannot become stuck in this routine if no characters are received. If you do want
 008                            ; KCPSM6 to wait indefinitely for a character to be received then either modify this
 008                            ; routine or perform a test of the Zero flag and repeat the call to this routine as
 008                            ; shown in this example...
 008                            ;
 008                            ;          wait_for_UART_RX: CALL UART_RX
 008                            ;                            JUMP Z, wait_for_UART_RX
 008                            ;
 008                            ;
 008                            ; Registers used s0, s1 and s5.
 008                            ;
 008  011A7            UART_RX: LOAD s1, A7[167'd]                           ;Timeout = 167 x (6 instructions x 2 clock cycles)
 009  09000         rx_timeout: INPUT s0, 00[UART_status_port]
 00A  0D008                     TEST s0, 08[UART_Rx_data_present]            ;Z=0 and C=1 when data present
 00B  3600F                     JUMP NZ, 00F[read_Rx]
 00C  19101                     SUB s1, 01[1'd]
 00D  31000                     RETURN Z                                     ;Timeout returns with Z=1 and C=0
 00E  22009                     JUMP 009[rx_timeout]
 00F                            ;
 00F  09501            read_Rx: INPUT s5, 01[UART_RX6_input_port]            ;read character from buffer
 010  25000                     RETURN 
 011                            ;
 011                            ;
 011                            ;------------------------------------------------------------------------------------------
 011                            ; End of 'uart_interface_routines.psm"'
 011                            ;------------------------------------------------------------------------------------------
 011                            ;


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

G:\Architektora_Kom\projekt_1\projekt_1.srcs\sources_1\imports\KC705_design\uart_interface_routines.psm



List of defined constants

 CONSTANT name        Value        Source PSM File

 timestamp_hours      14'd         
 timestamp_minutes    48'd         
 timestamp_seconds    24'd         
 datestamp_year       20'd         
 datestamp_month      3'd          
 datestamp_day        15'd         
 NUL                  00           
 BEL                  07           
 BS                   08           
 HT                   09           
 LF                   0A           
 VT                   0B           
 CR                   0D           
 ESC                  1B           
 DEL                  7F           
 DCS                  90           
 ST                   9C           
 UART_status_port     00           uart_interface_routines.psm
 UART_Tx_data_present 00000001'b   uart_interface_routines.psm
 UART_Tx_half_full    00000010'b   uart_interface_routines.psm
 UART_Tx_full         00000100'b   uart_interface_routines.psm
 UART_Rx_data_present 00001000'b   uart_interface_routines.psm
 UART_Rx_half_full    00010000'b   uart_interface_routines.psm
 UART_Rx_full         00100000'b   uart_interface_routines.psm
 UART_TX6_output_port 01           uart_interface_routines.psm
 UART_RX6_input_port  01           uart_interface_routines.psm
 reset_UART_port      01           uart_interface_routines.psm
 UART_tx_reset        00000001'b   uart_interface_routines.psm
 UART_rx_reset        00000010'b   uart_interface_routines.psm
 UART_reset           00000011'b   uart_interface_routines.psm
 UART_operate         00000000'b   uart_interface_routines.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "15 Mar 2020"  
 timestamp$        "14:48:24"     



List of line labels

   Label               Addr  Source PSM File

 * reset_UART_macros   000   uart_interface_routines.psm
   UART_TX             003   uart_interface_routines.psm
 * UART_RX             008   uart_interface_routines.psm
   rx_timeout          009   uart_interface_routines.psm
   read_Rx             00F   uart_interface_routines.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD              1
 STAR              -

 AND               -
 OR                -
 XOR               -

 ADD               -
 ADDCY             -
 SUB               1
 SUBCY             -

 TEST              2
 TESTCY            -
 COMPARE           -
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             3
 OUTPUT            1
 OUTPUTK           2

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP              3
 JUMP@             -
 CALL              -
 CALL@             -
 RETURN            4
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
